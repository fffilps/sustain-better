# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
"""
Shows how to generate an image with SDXL 1.0 (on demand).
"""
import base64
import io
import json
import logging
import boto3
from PIL import Image
from django.core.files.base import ContentFile

from ai_hackathon_api.models import CompanyEmotions, Company
from botocore.exceptions import ClientError

class ImageError(Exception):
    "Custom exception for errors returned by SDXL"
    def __init__(self, message):
        self.message = message

class SDXL():
    logger = logging.getLogger(__name__)
    logging.basicConfig(level=logging.INFO)

    def __init__(self, emotion_json, company_name, report_year):
        self.emotion_json = emotion_json
        self.company_name = company_name
        self.report_year = report_year
        clean_company_name = self.company_name.replace(' ', '_')
        self.img_company_dir = "./media/companies" + "/" +  clean_company_name
        self.img_name = "ai_gen_img.png"

    def save_image(self, img_contents):
        img_filename = self.img_company_dir + "/" + self.img_name
        try:
            print("saving" + img_filename)
            company_obj = Company.objects.get(name=self.company_name)
            img_file = ContentFile(img_contents)
            img_file.name = img_filename
            
            pdf = open(img_filename, 'wb')
            pdf.write(img_contents)
            pdf.close()

            company_emotion_obj = CompanyEmotions.objects.get(company=company_obj, year=self.report_year)
            company_emotion_obj.ai_gen_path = img_filename
            company_emotion_obj.save()

        except Exception as e:
            print("save_report_pdf: Exception caught ")
            print(e)

        print("pdf_filename saved " + img_filename)

    def generate_image(self, model_id, body):
        """
        Generate an image using SDXL 1.0 on demand.
        Args:
            model_id (str): The model ID to use.
            body (str) : The request body to use.
        Returns:
            image_bytes (bytes): The image generated by the model.
        """

        self.logger.info("Generating image with SDXL model %s", model_id)

        bedrock = boto3.client(service_name='bedrock-runtime')
    
        accept = "application/json"
        content_type = "application/json"

        response = bedrock.invoke_model(
            body=body, modelId=model_id, accept=accept, contentType=content_type
        )
        response_body = json.loads(response.get("body").read())
        print(response_body['result'])

        base64_image = response_body.get("artifacts")[0].get("base64")
        base64_bytes = base64_image.encode('ascii')
        image_bytes = base64.b64decode(base64_bytes)

        finish_reason = response_body.get("artifacts")[0].get("finishReason")

        if finish_reason == 'ERROR' or finish_reason == 'CONTENT_FILTERED':
            raise ImageError(f"Image generation error. Error code is {finish_reason}")

        self.logger.info("Successfully generated image withvthe SDXL 1.0 model %s", model_id)

        return image_bytes

    def get_bytes(self):
        """
        Entrypoint for SDXL example.
        """

        logging.basicConfig(level = logging.INFO,
                            format = "%(levelname)s: %(message)s")

        model_id='stability.stable-diffusion-xl-v1'

        self.emotion_json = {
  "Admiration": 0.027164140692912044,
  "Adoration": 0.017939583532279358,
  "Aesthetic Appreciation": 0.04711143369786441,
  "Amusement": 0.025856944196857513,
  "Anger": 0.005619873176328838,
  "Annoyance": 0.028910073987208306,
  "Anxiety": 0.006921065400820226,
  "Awe": 0.01679799018893391,
  "Awkwardness": 0.03631904595531523,
  "Boredom": 0.09349465651903302,
  "Calmness": 0.13945842273533343,
  "Concentration": 0.06860994859598576,
  "Confusion": 0.1584314643405378,
  "Contemplation": 0.06416925089433789,
  "Contempt": 0.023381528980098664,
  "Contentment": 0.08392836200073361,
  "Craving": 0.007269730471307412,
  "Determination": 0.04376279516145587,
  "Disappointment": 0.017848910251632332,
  "Disapproval": 0.014274132251739503,
  "Disgust": 0.007109123995178379,
  "Distress": 0.009062581061152741,
  "Doubt": 0.02444631249527447,
  "Ecstasy": 0.01365578595432453,
  "Embarrassment": 0.0071715267142280935,
  "Empathic Pain": 0.005748387542553246,
  "Enthusiasm": 0.027069166814908386,
  "Entrancement": 0.026280522206798197,
  "Envy": 0.0040856468782294545,
  "Excitement": 0.014309729705564678,
  "Fear": 0.0035513676193659194,
  "Gratitude": 0.011765197297791019,
  "Guilt": 0.0029398334183497353,
  "Horror": 0.0026865136707783675,
  "Interest": 0.0747972320765257,
  "Joy": 0.030628815875388682,
  "Love": 0.014987513519008644,
  "Nostalgia": 0.010771448584273457,
  "Pain": 0.009032581991050392,
  "Pride": 0.016665465483674778,
  "Realization": 0.048498157132416966,
  "Relief": 0.03550763889215887,
  "Romance": 0.00689762070105644,
  "Sadness": 0.008240496582584456,
  "Sarcasm": 0.014718681038357318,
  "Satisfaction": 0.07448421809822321,
  "Desire": 0.015404633470461703,
  "Shame": 0.009672040317673236,
  "Surprise (negative)": 0.02883258236106485,
  "Surprise (positive)": 0.025491168559528887,
  "Sympathy": 0.007919275161111728,
  "Tiredness": 0.04293563369428739,
  "Triumph": 0.03931311882915907
}
        # Create request body.
        body=json.dumps({
            "text_prompts": [
            {
            "text": json.dumps(self.emotion_json)
            }
        ],
        "cfg_scale": 10,
        "seed": 0,
        "steps": 50,
        "samples" : 1,
        "style_preset" : "photographic"

        })

        try:
            image_bytes=self.generate_image(model_id = model_id, body = body)
            image = Image.open(io.BytesIO(image_bytes))
            image.show()
            return image_bytes
        except ClientError as err:
            message=err.response["Error"]["Message"]
            self.logger.error("A client error occurred: %s", message)
            print("A client error occured: " + format(message))
        except ImageError as err:
            self.logger.error(err.message)
            print(err.message)
        else:
            print(f"Finished generating text with SDXL model {model_id}.")

if __name__ == "__main__":
    sdxl = SDXL()
    sdxl.main()
